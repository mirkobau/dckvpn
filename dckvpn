#!/bin/bash

# Name: dckvpn
# Author: Mirko Graziani (mirkobau)
# GitHub repo: https://github.com/mirkobau/dckvpn
# Release: 20210629, after a silent night.
# Language: bash scripting
# Intended use: technical users (FIXME: make a YT video for making this available to everyone)
# Requires: bash, docker-ce, screen, openssl, GNU coreutils.
#
# Description:
# builds a docker image based on 'fedora' and uses it as a
# selective gateway to a variety of concurrently open VPN Clients.
#
# Note for Windows 8/10 (and beyond?)
# Windows 10's network routing strategy is a great system..for domesticated monkeys.
# So if you're such that evolved animal that you
# expect to get what you typed in your routing table..
# ..then you'll need to cope a couple of minutes with gpedit.msc.
# So, after opening it:
#
# 1. Go to: Computer Configuration\Administrative Templates\Network\Windows Connection Manager
# 2. Set 'Minimize Number of Simultaneous Connections to Internet or a Windows Domain' to "Enabled" and "0".
# 3. Reboot
# 4. Enjoy it, my little rascal: you're free now.
#
# FIXME: add option to choose from other docker images
# WONTFIX: But hey,
# after a quick search this was the only one I found being able
# to install all required packages without any kind of magic tricks.
# And honestly, if it works and this all is about docker,
# then I don't feel portability as an essential need.

function dbg {
   if [[ -n "$@" ]] ; then
      echo "$@" 1>&2
   fi
}
export -f dbg

function todevnull {
   "$@" &> /dev/null
}
export -f todevnull

function ip2dword {
   export IPDWORD="$1"

   if [[ "$IPDWORD" == "0" ]] ; then
      export IPDWORD="0.0.0.0"
   fi

   export IPDWORD="((((${IPDWORD//./) * 256 + })"

   export IPDWORD="$(( $IPDWORD ))"

   echo "$IPDWORD"
}
export -f ip2dword

function dword2ip {
   export IPDWORD="$1"

   export IPBYTE3="$(( ($IPDWORD % (256 ** 4)) / (256 ** 3) ))"
   export IPBYTE2="$(( ($IPDWORD % (256 ** 3)) / (256 ** 2) ))"
   export IPBYTE1="$(( ($IPDWORD % (256 ** 2)) / (256 ** 1) ))"
   export IPBYTE0="$(( ($IPDWORD % (256 ** 1)) / (256 ** 0) ))"

   echo "$IPBYTE3.$IPBYTE2.$IPBYTE1.$IPBYTE0"
}
export -f dword2ip

function ipmasked {
   export IPANDMASK="$1"

   export IPBITS="${IPANDMASK##*/}"
   export IPBITS="$(( 2 ** ( 32 - $IPBITS ) ))"

   export IPDWORD="$( ip2dword "${IPANDMASK%%/*}" )"
   export IPDWORD="$(( $IPDWORD / $IPBITS ))"
   export IPDWORD="$(( $IPDWORD * $IPBITS ))"

   dword2ip "$IPDWORD"
}
export -f ipmasked

# ensures required packages are present in the system
function pkgrequirements {
   for REQNAME in "$@" ; do
      export REQNAME
      if [[ -z "$( dnf list installed $REQNAME 2> /dev/null )" ]] ; then
         dnf -y install "$REQNAME"
      fi
   done
}
export -f pkgrequirements

# Asks stdin for User and Password.
function askup {
   if [[ "$VPNSETTINGSLOADED" -eq 0 && "$VPNSETTINGSASKED" -eq 1 ]] ; then
      echo -n "     Usr:"
      read -r VPNUSR
      echo -n "     Pwd:"
      read -rs VPNPWD
      echo
   fi
}
export -f askup

# Takes settings encrypted file,
# decrypts it
# gives to stdout a bunch of commands for 'eval'
# that - hopefully - recreate saved variables and theyr respective values
function loadsettings {
   dbg "Loading settings from file '$VPNSETTINGSFILE'."

   (
      echo "$VPNNAME"
      openssl enc -base64 -d < "$VPNSETTINGSFILE"
   ) \
   | openssl enc -aes-256-cbc -d -pbkdf2 -pass stdin

   # ...(continued from 'savesettings' function)
   # when you'll open this VPN next time, we'll
   # load these settings replacing the former saved ones.
   # The file will be deleted once correctly loaded.
   if [[ -f "$VPNROUTESFILE" && -s "$VPNROUTESFILE" ]] ; then
      dbg "Found new routes file '$VPNROUTESFILE': setting new routes."
      echo "export VPNROUTES='$(cat "$VPNROUTESFILE")'"

      dbg "Removing '$VPNROUTESFILE'."
      rm -f "$VPNROUTESFILE"
   fi
}
export -f loadsettings

function savesettings {
   dbg "Saving settings to file '$VPNSETTINGSFILE'."
   (
      echo "$VPNNAME"
      # 'VPNVARNAMES' variable is populated in the global initialization part (see below)
      for VPNVARNAME in $VPNVARNAMES ; do
         echo "export $VPNVARNAME='${!VPNVARNAME}'"
      done
   ) \
   | openssl enc -aes-256-cbc -base64 -pbkdf2 -pass stdin \
   > "$VPNSETTINGSFILE"

   # if you 'touch "$VPNROUTESFILE"', leaving it empty (zero bytes),
   # that file will be populated next time you'll user the VPN.
   # then...(continued in 'loadsettings' function)
   if [[ -f "$VPNROUTESFILE" && ! -s "$VPNROUTESFILE" ]] ; then
      dbg "Found new routes empty file '$VPNROUTESFILE': populating it."
      echo "$VPNROUTES" > "$VPNROUTESFILE"
   fi
}
export -f savesettings

function todck {
   # Write to docker container each argument in a separate line.
   for DCKNEXTLINE in "$@" ; do
#      dbg "$DCKNEXTLINE >&$todckfd"
      echo "$DCKNEXTLINE" >&$todckfd
      sleep 0.1
   done
}
export -f todck

function fmdck {
   export fmdckline=""
   while read -rst $DCKREADTIMEOUT -u $fmdckfd fmdckline && [[ -z "$fmdckline" ]] ; do
      true
   done
   if [[ -n "$fmdckline" ]] ; then
      echo "$fmdckline"
   fi
}
export -f fmdck

# make the container spit out a random variable (FIXME: $RANDOM isn't really random),
# then send given commands to the container.
# What's next?
# 1. wait for that random variable in a single line by itself,
#    eating out everything was in buffer before it.
# 2. read lines from container and echo them to stdout, until we get an empty line
# 
# FIXME: (improvement) step2 --> read until we read a certain line marker
# WONTFIX: there's no need for a line marker at the end of the output,
# since all functions and loops are built on the line marker at the beginning of output.
function dckchat {
   export DCKLINEMARK="DCKLINEMARK#$RANDOM"
   export DCKNEXTLINE="$DCKLINEMARK"

   # send to container the line marker and subsequent commands given
   todck "echo $DCKNEXTLINE" "$@"

   # Look for line marker
   while [[ "$( fmdck )" != "$DCKLINEMARK" ]] ; do
      true
   done

   # read & echo lines, until we get an empty one
   # (this is intended as "nothing else to read")
   while [[ -n "$DCKNEXTLINE" ]] ; do
      export DCKNEXTLINE="$( fmdck )"
      echo "$DCKNEXTLINE" | egrep -v "^ *\r?*$"
   done
}
export -f dckchat

function dckwait4 {
   export DCKWAITPATTERN="$1"
   shift

   export DCKLINES=""
   dbg "Waiting for specific line from container."
   while [[ -z "$( egrep "$DCKWAITPATTERN" <<< "$DCKLINES" )" ]] ; do
      dbg "$DCKLINES"
      sleep 0.1
      export DCKLINES="$( fmdck )"
   done
   echo "$DCKLINES"
}
export -f dckwait4

# This is a little different from other '...dck' functions defined here.
# 
# We here execute a *new* shell inside the container, and pass it the given commands.
# This is useful for inspecting main process behaviour,
# like i.e. charon-cmd in ipsecvpn function, in which
# we dynamically re-engineer routes created by charon-cmd.
function indck {
   for DCKNEXTLINE in "$@" ; do
      echo "$DCKNEXTLINE"
   done \
   | docker container exec -i --privileged "$VPNNAME" su -s /bin/bash
}
export -f indck

function dckid {
   docker ps -q -f "ancestor=dckvpn" -f "name=$VPNNAME"
}
export -f dckid

function killdck {
   dbg "Killing a previously running container with name '$1'."
   todevnull docker kill "$1"
   todevnull docker rm "$1"
}
export -f killdck

function dcktables {
   export DCKTRAFFICSEL="$1"
   shift

   indck \
   "iptables -t nat -I POSTROUTING $DCKTRAFFICSEL -j MASQUERADE" \
   "iptables -t filter -I FORWARD $DCKTRAFFICSEL -m state --state NEW -j ACCEPT"
}
export -f dcktables

# dcknetnew NetworkName NetworkDriver IPRange/MaskBits Gateway/MaskBits
function dcknetnew {
   export DCKNETNAME="$1"
   shift

   export DCKNETDRIVER="$1"
   shift

   export DCKNETIPRANGE="$1"
   shift

   export DCKNET="$1"
   shift

   # if network interface name isn't given, use DCKNETNAME
   export DCKIFACE="${1:-$DCKNETNAME}"
   shift

   # extract gateway from gateway/bits parameter
   export DCKGW="${DCKNET%%/*}"
   # extract bits (= network) from gateway/bits parameter
   export DCKNETBITS="${DCKNET##*/}"

   # calculate network by masking gateway address
   export DCKNET="${DCKNET:+$( ipmasked "$DCKNET" )}"

   # extract bits from iprange/bits parameter
   export DCKNETIPBITS="${DCKNETIPRANGE##*/}"

   export DCKNETOPTS="-d '$DCKNETDRIVER' --label='$VPNNAME'"
   case "$DCKNETDRIVER" in
   bridge)
      export DCKNETOPTS="$DCKNETOPTS -o 'com.docker.network.bridge.name=$DCKIFACE'"
      export DCKNETOPTS="$DCKNETOPTS -o 'com.docker.network.bridge.enable_ip_masquerade=true'"
      export DCKNETOPTS="$DCKNETOPTS -o 'com.docker.network.bridge.enable_icc=false'"
      export DCKNETBASE="169.254.86.0"
      export DCKNETBASE="$( ip2dword "$DCKNETBASE" )"
      export DCKNETBASE="$(( $DCKNETBASE + $DCKNETID * 4 ))"
      export DCKNETBASE="$( dword2ip "$DCKNETBASE" )"

      if [[ -n "$DCKNETIPRANGE" ]] ; then
         # If IPRange is given, use it.
         export DCKNETOPTS="$DCKNETOPTS ${DCKNETIPRANGE:+--ip-range='$DCKNETIPRANGE'}"
      else
         # If IPRange is given, use it.
         export DCKNETOPTS="$DCKNETOPTS --ip-range='$DCKNETBASE/30'"
      fi

      if [[ -n "$DCKNET" ]] ; then
         # If Subnet is given, use it.
         export DCKNETOPTS="$DCKNETOPTS ${DCKNET:+--subnet='$DCKNET/$DCKNETBITS'}"
      else
         # If Subnet is given, use it.
         export DCKNETOPTS="$DCKNETOPTS --subnet='$DCKNETBASE/30'"
      fi
   ;;
   macvlan)
      export DCKNETOPTS="$DCKNETOPTS -o 'parent=$DCKIFACE'"

      # Subnet is mandatory here, for macvlan driver.
      export DCKNETOPTS="$DCKNETOPTS '--gateway=$DCKGW'"

      # IPRange is mandatory here, for macvlan driver.
      export DCKNETOPTS="$DCKNETOPTS '--ip-range=$DCKNETIPRANGE'"

      # Subnet is mandatory here, for macvlan driver.
      export DCKNETOPTS="$DCKNETOPTS '--subnet=$DCKNET/$DCKNETBITS'"
   ;;
   esac

   # Create network if it doesn't exist
   if [[ -z "$( docker network ls -qf "name=$DCKNETNAME" )" ]] ; then
      dbg "Creating missing '$DCKNETDRIVER' network '$DCKNETNAME'."
      echo "docker network create --attachable $DCKNETOPTS '$DCKNETNAME'"
      eval "docker network create --attachable $DCKNETOPTS '$DCKNETNAME'"
   fi
}
export -f dcknetnew

function dcknetdel {
   for DCKNET in $( docker network ls -qf "label=$VPNNAME" ) ; do
      docker network rm "$DCKNET"
   done
}
export -f dcknetdel

function dckrun {
   # kill an already-running container with same name
   killdck "$VPNNAME"

   while [[ -z "$( dckid )" && ! -c "/proc/self/fd/$todckfd" && ! -c "/proc/self/fd/$fmdckfd" ]] ; do
      dcknetnew "$DCKLANIFACENAME" "bridge"

      dbg "(re)spawning a container in a co-process."
      # We run as root inside the container, and we get a standard bash environment by elevating our privileges with 'su'.
      # The shell is interactive, meaning that it will receive our stind ad will give us its stdout.
      export todckfd="-1"
      export fmdckfd="-1"
      unset dckvpnproc
      unset dckvpnproc_PID
      export DCKCMD="docker container run -i --name '$VPNNAME' --privileged --rm --network='$DCKLANIFACENAME' dckvpn su -s /bin/bash 2>&1"
      dbg "$DCKCMD"
      coproc dckvpnproc {
         eval "$DCKCMD"
      }
      export dckvpnproc
      export dckvpnproc_PID

      export TIMETOGIVEUP=3
      export TIMETOGIVEUP=$(( $SECONDS + $TIMETOGIVEUP ))
      while [[ "$SECONDS" -le "$TIMETOGIVEUP" && -z "$( docker inspect -f {{.State.Running}} "$VPNNAME" 2> /dev/null )" ]] ; do
         dbg "Waiting for container in coprocess with PID $dckvpnproc_PID to be inspectable."
         sleep 0.4
      done

      dbg "Inspecting status of container with PID $dckvpnproc_PID."
      export TIMETOGIVEUP=8
      export TIMETOGIVEUP=$(( $SECONDS + $TIMETOGIVEUP ))
      while [[ "$SECONDS" -le "$TIMETOGIVEUP" && "$( docker inspect -f {{.State.Running}} "$VPNNAME" 2> /dev/null )" != "true" ]] ; do
         dbg "Waiting for container in coprocess with PID $dckvpnproc_PID to be ready."
         sleep 0.4
      done

      export dckvpnproc

      # FIXME/FIXED: container must be running

      # cosmetic: take out the coproc stdin and stoud file descriptors
      export todckfd=${dckvpnproc[1]}
      export fmdckfd=${dckvpnproc[0]}
   done

   dbg "Getting host IP address as seen from inside docker (it's the same as from host's point-of-view)."
   # Take host's IP as seen from inside docker.
   # This is (sould be) the same address in host's ip route tables.
   export HOSTIP="$( dckchat 'ip route list exact default | cut -d " " -f 3' )"

   dbg "Getting container's IP address."
   # Take container's IP: this will be used when setting host's routes.
   export DCKIP="$( 
      dckchat '
         ip addr list dev eth0 \
         | egrep " inet " \
         | cut -d / -f 1 \
         | cut -d t -f 2 \
         | cut -d " " -f 2
      '
   )"

   dbg "Configuring network internals inside container."
   indck \
   "echo 2 > /proc/sys/net/ipv4/tcp_syn_retries"
}
export -f dckrun

function dckwait {
   dbg "Starting VPN Monitor loop."
   # While VPN clients are running inside docker, simply wait.
   # Otherwise, proceed with cleanup.
   while [[ -n "$( indck "pstree | egrep '(openvpn|openconnect|openfortivpn|charon-cmd|tcpdump)'" 2> /dev/null )" ]] ; do
      export DCKLINE="$( fmdck 2> /dev/null )"
      dbg "$DCKLINE"
      sleep 0.1
   done
   dbg "VPN Monitor loop finished."

   killdck "$VPNNAME"

   dcknetdel

   cleanroutes
}
export -f dckwait

# This is pretty particular.
# Here we define a docker container that will act as default gateway for host.
# There's no special purpose in doing this: this is only a tricky thing I tried,
# just to see if it worked good or not.
function gwvpn {
   # The first is the network interface to which attach to,
   # the second is the gateway/network,
   # the third is the ip range assigned to container
   read VPNIFACE VPNNET VPNIPRANGE <<< "${VPNIP//[:;,]/ }"
   export VPNIFACE
   export VPNNET
   export VPNIPRANGE

   dckrun

   dbg "Deleting container's default route."
   indck \
   "ip route delete default" \

   dbg "Creating $DCKWANIFACENAME network."
   dcknetnew "$DCKWANIFACENAME" "macvlan" "$VPNIPRANGE" "$VPNNET" "$VPNIFACE"

   dbg "Adding $DCKWANIFACENAME network to container."
   docker network connect "$DCKWANIFACENAME" "$VPNNAME"
   
   # extract gateway from first parameter
   export VPNGW="${VPNNET%%/*}"

   for VPNROUTE in $VPNROUTES ; do
      indck "ip route add '$VPNROUTE' via '$VPNGW'"
      dcktables "-d '$VPNROUTE'"
   done

   dbg "Setting routes inside container."
   indck \
   "ip route add 192.168.0.0/16 via '$HOSTIP'" \
   "ip route add 172.16.0.0/12 via '$HOSTIP'" \
   "ip route add 10.0.0.0/8 via '$HOSTIP'" \

   dckchat "tcpdump -nnvvi any"
}
export -f gwvpn

# Opens a OpenVPN client
# VPNNAME is (must be) also the name of the folder '/etc/openvpn/$VPNNAME'
# This folder will be copied to docker container, and
# openvpn will be launched with according parameters --cd and --config.
# the $VPNNAME.ovpn config file must contain a line 'dev XXXX',
# where XXXX will be subsequently used as interface name for routes and iptables rules.
function ovpn {
   dckrun

   indck "base64 -d | tar x -vC /etc/openvpn" "$(
      tar c -C /etc/openvpn "$VPNNAME" | base64
   )"

   # extract line with interface name from config file
   export OVPNDEV="$( egrep "^ *dev " /etc/openvpn/$VPNNAME/$VPNNAME.ovpn )"
   # cut off everything except interface name
   export OVPNDEV="${OVPNDEV##* }"

   # MASQUERADE encapsulated traffic, as usual
   # ACCEPT new connections towards "any" on the other side of the tunnel
   dcktables "-o '$OVPNDEV'"

   dbg "Launching openvpn in container."
   export OVPNCMD="openvpn --cd '/etc/openvpn/$VPNNAME' --config '$VPNNAME.ovpn'"
   dckchat "$OVPNCMD 2>&1"
}
export -f ovpn



# Launches a 'openfortivpn' client inside container for SSL VPN connections toward a FortiGate NGFW.
function ofvpn {
   dckrun

   # Reconnect every 16 seconds if VPN drops
   export OFVPNCMD="openfortivpn '$VPNIP' -u '$VPNUSR' -p '$VPNPWD' --persistent=16"

   # openfortivpn can put to stdout the following results:
   #
   # "Using interface..."
   # This means everything is OK for puntting on the tunnel.
   # The final word is interface name.
   #
   # ERROR:      --trusted-cert HexCharsHexCharsHexCharsHexCharsHexCharsHexCharsHexCharsHexChars
   # Tunnel will not be correctly set up, because we need
   # to add a command-line argument for accepting gateway's certificate.
   # openfortivpn will exit, so we'll need to re-spawn a second one.
   # FIXME: add a mechanism to only accept a specific certificate.
   dbg "Launching openfortivpn in container."
   export OFVPNLINE="$( dckchat "$OFVPNCMD 2>&1" )"
   export OFVPNLINE1=""
   while [[ -n "$( indck "pstree | egrep 'openfortivpn'" 2> /dev/null )" && -z "$OFVPNLINE1" ]] ; do
      # show openfortivpn output to user
      dbg "$OFVPNLINE"

      # Intercept a specific line in openfortivpn's response.
      export OFVPNLINE1="$( egrep -m1 "(Using interface|--trusted-cert)" <<< "$OFVPNLINE" )"

      # Keep only last word: is contains the value we were looking for.
      export OFVPNLINEDATAVALUE="${OFVPNLINE1##* }"

      # On the other side, cut apart the part before the value
      export OFVPNLINEDATANAME="${OFVPNLINE1% $OFVPNLINEDATAVALUE}"
      # Cut off everything until the last space.
      # This wil lbring us to a 'interface' or a '--trusted-cert' value in variable
      export OFVPNLINEDATANAME="${OFVPNLINEDATANAME##* }"

      # Do something if we found a useful line.
      if [[ -z "$OFVPNLINE1" ]] ; then
         # We still got nothing useful from container.

         # Get next line from container
         export OFVPNLINE="$( fmdck )"
      else
         case "$OFVPNLINEDATANAME" in
         interface)
            # The VPN tunnel will be created!
            # Let's configure the firewall.
            dcktables "-o '$OFVPNLINEDATAVALUE'"
         ;;
         --trusted-cert)
            dbg "openfortivpn complained about an untrusted certificate."

            dbg "Killing openfortivpn."
            indck "killall openfortivpn"

            # Add parameters to command line
            export OFVPNCMD="$OFVPNCMD $OFVPNLINEDATANAME $OFVPNLINEDATAVALUE"

            # Enqueue a fresh new openfortivpn command inside docker container,
            # and get first lines that it puts on stdout.
            dbg "Launching openfortivpn in container again,"
            dbg "this time with --trusted-cert option correctly set."
            export OFVPNLINE="$( dckchat "$OFVPNCMD 2>&1" )"
            export OFVPNLINE1=""
         ;;
         esac
      fi
   done
}
export -f ofvpn



# Interface function to 'openconnect'.
# All necessary parameters are pre-set in exported environment variables.
function ocvpn {
   dckrun

   # Arbitrary interface name
   export OCVPNDEV=tun8
   # this is gonna be used only once: in the next line,
   # but I keep it here for clearness.
   export OCVPNARGS="-i '$OCVPNDEV' '--protocol=$VPNTYPE' -u '$VPNUSR' --passwd-on-stdin '$VPNIP'"

   #[[ -n "$OCVPNLINE" ]] ; do
   export OCVPNLINE="."
   while true ; do
      if [[ "$OCVPNLINE" == "." ]] ; then
         dbg "(Re-)Starting openconnect in container."
         todck \
         "openconnect $OCVPNARGS 2>&1" \
         "$VPNPWD"
         
         dbg "Waiting initial connection response from openconnect."
         export OCVPNLINE="$( dckwait4 "^(Failed to connect|Connected to) " )"
         dbg "Gotcha!"
      fi

      dbg "$OCVPNLINE"

      # This comes just before "Enter 'yes' to accept, 'no' to abort" line.
      # Line that will not be read until someone enters something, so the stdout will spit out a newline.
      # This is why we look for the "line before" instead of the effective one.
      if [[ "${OCVPNLINE:0:12}" == "--servercert" ]] ; then
         dbg "Openconnect needs an extra parameter: killing it and restarting over."
         indck "killall openconnect"

         export OCVPNARGS="$OCVPNLINE $OCVPNARGS"
         export OCVPNLINE="."

      elif [[ "$OCVPNLINE" == "Authentication failed." ]] ; then
         dbg "Authentication failed: this isn't allowed yet.   Failing."
         indck "killall openconnect"
         break
      
      elif [[ "${OCVPNLINE:0:21}" == "Failed to connect to " ]] ; then
         if [[ -z "${OCVPNLINE%%* Connection timed out}" ]] ; then
            export OCVPNLINE="."
         else
            dbg "Connection failed for unknown reason. Giving up."
            indck "killall openconnect"
            break
         fi

      elif [[ "${OCVPNLINE:0:13}" == "Connected as " ]] ; then
         # Set up firewall
         dcktables "-o '$OCVPNDEV'"
         break

      else
         # Get next line from docker
         export OCVPNLINE="$( fmdck )"

      fi
   done
}
export -f ocvpn



# Guess IPSEC VPNs interface function.
# We use charon-cmd from strongSwan here.
function ipsecvpn {
   dckrun

   # These values are taken from: https://wiki.strongswan.org/projects/strongswan/wiki/IKEv1CipherSuites
   export DHGROUPS="
      s/DH1/modp768/g
      s/DH2/modp1024/g
      s/DH5/modp1536/g
      s/DH14/modp2048/g
      s/DH15/modp3072/g
      s/DH16/modp4096/g
      s/DH17/modp6144/g
      s/DH18/modp8192/g
      s/DH22/modp1024s160/g
      s/DH23/modp2048s224/g
      s/DH24/modp2048s256/g
      s/DH25/ecp192/g
      s/DH26/ecp224/g
      s/DH19/ecp256/g
      s/DH20/ecp384/g
      s/DH21/ecp521/g
      s/DH27/ecp224bp/g
      s/DH28/ecp256bp/g
      s/DH29/ecp384bp/g
      s/DH30/ecp512bp/g
      s/DH31/curve25519/g
      s/DH31/x25519/g
   "

   # Change 'DHxx' into correspondent parameter for charon-cmd..
   # ..for so-called 'Phase 1'..
   export VPNPHASE1EDIT="$( sed -re "$DHGROUPS" <<< "$VPNPHASE1" )"
   # ..and for so-called 'Phase 2'.
   export VPNPHASE2EDIT="$( sed -re "$DHGROUPS" <<< "$VPNPHASE2" )"

   # Convert phase1 and phase2 cipher suites definitions to lowercase
   export VPNPHASE1EDIT="${VPNPHASE1EDIT,,}"
   export VPNPHASE2EDIT="${VPNPHASE2EDIT,,}"

   # The default ip route table 220 created by charon-cmd is a "catchall" route.
   # Here we'll need a more fine-grained routes, so we put this away and create new route rules later.
   # Here below we're only making sure there's no pre-existing ip route table 220 before we begin to work.
   dbg "Flushing ip route table 220."
   indck "ip route flush table 220"

   dbg "Launching charon-cmd in container."
   todck \
   "charon-cmd \\
   --host '$VPNIP' \\
   --remote-identity %any \\
   --identity '$VPNID' \\
   --xauth-username '$VPNUSR' \\
   --profile ikev1-xauth-psk-am \\
   --ike-proposal '$VPNPHASE1EDIT' \\
   --esp-proposal '$VPNPHASE2EDIT' \\
   --debug 0"

   dbg "Waiting 2 seconds (arbitrary), then sending username to charon-cmd."
   sleep 2
   todck "$VPNPSK"

   dbg "Waiting 1 seconds (arbitrary), then sending password to charon-cmd."
   sleep 1
   todck "$VPNPWD"

   dbg "Waiting for charon-cmd to create ip route table 220."
   export VPNCLITABLE=""
   while [[ -z "$VPNCLITABLE" ]] ; do
      fmdck
      sleep 0.1
      export VPNCLITABLE="$( indck "ip route list table 220 exact default" )"
   done

   dbg "Extracting informations from ip route table 220."

   export VPNCLIDEV="${VPNCLITABLE##* dev }"
   export VPNCLIDEV="${VPNCLIDEV%% *}"

   export VPNCLIIP="${VPNCLITABLE##* src }"
   export VPNCLIIP="${VPNCLIIP%% *}"

   dbg "Flushing ip route table 220 and creating fine-grained routes."

   indck "ip route flush table 220"
   for VPNROUTE in $VPNROUTES ; do
      # while remaining a best practice, this adds an
      # uncomfortable '-j MASQUERADE' rule to POSTROUTING chain in nat table.
      # We don't care too much about this,
      # because the -j SNAT (see below) will take precedence
      dcktables "-d '$VPNROUTE'"

      indck \
      "ip route add '$VPNROUTE' dev $VPNCLIDEV via '$VPNCLIIP' table 220" \
      "iptables -t nat -I POSTROUTING -d '$VPNROUTE' -j SNAT --to-source '$VPNCLIIP'"
   done
}
export -f ipsecvpn

function cleanroutes {
   dbg "Cleaning host's routes."
   # Clean host's old routes.
   for VPNROUTE in $VPNROUTES ; do
      todevnull ip route delete "$VPNROUTE" dev $DCKLANIFACENAME
   done

   dbg "Flushing iptables inside container."
   todck "iptables -F &> /dev/null"
}
export -f cleanroutes

function setroutes {
   # Clean all predefined routes if already defined.
   cleanroutes

   dbg "Setting iptables inside container."
   # FIXED: create better iptables rules, based on the actual
   # interface and/or IP addresses used in docker container.
   # FIXED in functions:
   # ovpn: DONE
   # ofvpn: DONE
   # ocvpn: DONE
   # ipsecvpn: DONE
   # Build basic iptables rules
   indck \
   "iptables -t filter -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" \
   "iptables -t filter -A FORWARD -j REJECT"

   dbg "Setting host's routes."
   # set host's new routes to the container
   for VPNROUTE in $VPNROUTES ; do
      todevnull ip route add $VPNROUTE dev $DCKLANIFACENAME via $DCKIP 
   done
}
export -f setroutes




dbg "Checking requirements."
# Well, Forrest, you'll require..
pkgrequirements \
   bash \
   docker-ce \
   screen \
   openssl \
   jq \
   # ..that- that's about it

# VPN Name is a key value:
# - it's used to compose the settings file name,
# - it's used as a (weak) encryption key for settings file
#   About this: I *KNOW* this has nothing to do with security in any way,
#   but at the same time this is a base from which to start for an improvement.
#   (see comments to VPNENCPWD variable)
export VPNNAME="$1"
shift

export VPNNAME="${VPNNAME%.dckvpn}"

case "$VPNNAME" in
ls|list|ps)
   docker ps -f "ancestor=dckvpn"

   exit
;;
kill)
   export VPNNAME="$1"
   shift

   killdck "$VPNNAME"

   exit
;;
esac

while [[ -z "$VPNNAME" ]] ; do
   echo -n "VPN Name:"
   read -r VPNNAME
done

# We'd like to run in a screen, but only if stdin is a terminal.
if [[ -z "${STY##.$VPNNAME}" && -t 0 ]] ; then
   dbg "Spawning a screen session."
   screen -S "$VPNNAME" "$0" "$VPNNAME" "$@"
   dbg "Execution continued on screen session.   Bye."
   exit
fi

dbg "Verifying base image."
# Verify the base image is ready; if not, prepare it.
if [[ -z "$(docker image ls dckvpn -q 2> /dev/null)" ]] ; then
   dbg "Base image not ready."

   dbg "Pulling Fedora."
   # Pull base image.
   # Fedora has been found to be suitable for our needs.
   docker image pull fedora

   dbg "Installing packages inside container."
   dbg "(this may take a while and will seem unresponsive but..just have faith)"
   # we need some packages to make everything run OK
   docker container run --name dckvpn -i --privileged fedora su <<< '
      dnf -y install iproute iptables iputils nftables tcpdump
      dnf -y install openfortivpn openconnect vpnc openvpn strongswan
      dnf -y install openssh
      dnf -y upgrade
   '

   dbg "Committing to base image 'dckvpn'."
   # FIXME: check if packages were correctly installed
   #echo -m 256M --cpus 1
   # This will be our image with which we'll work.
   docker commit dckvpn dckvpn

   dbg "Removing temporary container used for image generation."
   # The container is no longer useful.
   docker container rm dckvpn

   dbg "Trying to spit out a welcome message inside a docker container."
   # Spit out a message about the end of preparation.
   docker container run --name dckvpn -it --privileged --rm dckvpn bash -c "echo Image dckvpn is ready."

   dbg "Image preparation ended.   Hopefully without incidents.   -____-"
fi

# FIXME: verify host's NIC IP address is a link-local (169.254.0.0/16)
# or whatever other security and/or security-through-obscurity feature
# that gives in some way a pretty good ensurance about host's security.

# This will be the encryption key, read from stdin by openssl.
# FIXME: use a better encryption key.
#        For example, ask the key to the user everytime they launch this script.
#        Or read the key from user's computer through an SSH (cygwin or similar required for Windows environments).
#        The following is just a basic idea to get system BIOS UUID:
#
#           wmic path win32_computersystemproduct get uuid | egrep "^.{8}(-.{4}){4}.{8}"
export VPNENCPWD="$VPNNAME"

# Arbitrary: 2 seconds of read timeout
export DCKREADTIMEOUT=0.4

# We'll work on this global variables.
export VPNVARSFM="$(( $LINENO + 1 ))"
export VPNROUTES=""
export VPNTYPE=""
export VPNIP=""
export VPNUSR=""
export VPNPWD=""
export VPNID=""
export VPNPHASE1=""
export VPNPHASE2=""
export VPNPSK=""
export VPNVARSTO="$(( $LINENO - 1 ))"

export VPNVARNAMES="$(
   sed -nre "$VPNVARSFM,$VPNVARSTO{
      s/^[^ ]+ ([^=]+)=.*$/\1/g
      p
   }" "$0"
)"

export VPNSETTINGSFILE="$VPNNAME.dckvpn"
export VPNROUTESFILE="$VPNNAME.routes"
# Take variable's values from saved file, if present
if [[ -f "$VPNSETTINGSFILE" ]] ; then
   eval "$( loadsettings )"
   export VPNSETTINGSLOADED=1
   export VPNSETTINGSASKED=0
else
   export VPNSETTINGSLOADED=0
   export VPNSETTINGSASKED=1

   echo -n "  Routes:"
   read -r VPNROUTES

   echo -n "VPN type:"
   read -r VPNTYPE

   echo -n " Peer IP:"
   read -r VPNIP
fi

export VPNTYPE="${VPNTYPE,,}"

# get docker network ids
# inspect each network
# extract network Name as a raw string
# cut off everything except numeric ID
# numerically sort all IDs
# keep only the last ID
export DCKNETID="$(
   docker network ls -q -f "driver=bridge" -f "name=dck*" \
   | xargs -I§ bash -c "docker network inspect § \
   | jq -r .[].Name" \
   | cut -d n -f 2 \
   | sort -n \
   | tail -n 1 \
)"
export DCKNETID="$(( $DCKNETID + 1 ))"
# Network name can't exceed 15 characters.
# This forces us to use a NETID instead of "dcklan-$VPNNAME" and "dckwan-$VPNNAME".
export DCKLANIFACENAME="dcklan$DCKNETID"
export DCKWANIFACENAME="dckwan$DCKNETID"

dbg "Choosing VPN Client."
export VPNASKUP="askup"
export VPNFUNC="true"
case "$VPNTYPE" in
gw|gwvpn)
   dbg "sooooo cute! a gateway docker container!"
   dbg "(Hey, psst! This is experimental, you know...)"

   export VPNTYPE="gwvpn"
   export VPNASKUP="false"
   export VPNFUNC="gwvpn"
;;
ov|ovpn|openvpn)
   export VPNTYPE="openvpn"
   export VPNFUNC="ovpn"
;;
gp|anyconnect|ac)
   if [[ "$VPNTYPE" == "ac" ]] ; then
      export VPNTYPE="anyconnect"
   fi
   export VPNFUNC="ocvpn"
;;
fortissl|ofvpn|of)
   export VPNFUNC="ofvpn"
;;
ipsec|ipsecvpn)
   if [[ -z "$VPNID" ]] ; then
      dbg "..oops, it's a IPSEC VPN: we need a bit of extra infos."

      echo -n " Peer ID:"
      read -r VPNID
      echo -n "  Phase1:"
      read -r VPNPHASE1
      echo -n "  Phase2:"
      read -r VPNPHASE2
      echo -n "     PSK:"
      read -rs VPNPSK
      echo
   fi

   export VPNFUNC="ipsecvpn"
;;
*)
   echo "No vaild options given; switching to 'cat-to-null' mode.   Press ctrl+d to end stdin."
   cat &> /dev/null
   exit
;;
esac

eval "$VPNASKUP"

dbg "Launching VPN Client."
eval "$VPNFUNC"

dbg "VPN Client connection phase is over."

setroutes

# Detach screen only if we're on a screen, and it's the right screen
if [[ -n "$STY" && "$STY" =~ [[:digit:]]+\.$VPNNAME ]] ; then
   dbg "Detaching screen in 3 seconds.   You can re-attach it with: screen -r $VPNNAME."
   sleep 3
   # Detach user interface: there's no need for holding user's attention.
   screen -d "$STY"
fi

savesettings

dckwait
